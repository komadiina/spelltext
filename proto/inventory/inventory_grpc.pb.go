// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: inventory/inventory.proto

package inventory

import (
	context "context"
	health "github.com/komadiina/spelltext/proto/health"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Inventory_Check_FullMethodName              = "/inventory.Inventory/Check"
	Inventory_GetBalance_FullMethodName         = "/inventory.Inventory/GetBalance"
	Inventory_SellItem_FullMethodName           = "/inventory.Inventory/SellItem"
	Inventory_AddItemsToBackpack_FullMethodName = "/inventory.Inventory/AddItemsToBackpack"
	Inventory_ListBackpackItems_FullMethodName  = "/inventory.Inventory/ListBackpackItems"
)

// InventoryClient is the client API for Inventory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryClient interface {
	Check(ctx context.Context, in *health.HealthCheckRequest, opts ...grpc.CallOption) (*health.HealthCheckResponse, error)
	GetBalance(ctx context.Context, in *InventoryBalanceRequest, opts ...grpc.CallOption) (*InventoryBalanceResponse, error)
	SellItem(ctx context.Context, in *SellItemRequest, opts ...grpc.CallOption) (*SellItemResponse, error)
	AddItemsToBackpack(ctx context.Context, in *AddItemsToBackpackRequest, opts ...grpc.CallOption) (*AddItemsToBackpackResponse, error)
	ListBackpackItems(ctx context.Context, in *ListBackpackItemsRequest, opts ...grpc.CallOption) (*ListBackpackItemsResponse, error)
}

type inventoryClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryClient(cc grpc.ClientConnInterface) InventoryClient {
	return &inventoryClient{cc}
}

func (c *inventoryClient) Check(ctx context.Context, in *health.HealthCheckRequest, opts ...grpc.CallOption) (*health.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(health.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Inventory_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) GetBalance(ctx context.Context, in *InventoryBalanceRequest, opts ...grpc.CallOption) (*InventoryBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InventoryBalanceResponse)
	err := c.cc.Invoke(ctx, Inventory_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) SellItem(ctx context.Context, in *SellItemRequest, opts ...grpc.CallOption) (*SellItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SellItemResponse)
	err := c.cc.Invoke(ctx, Inventory_SellItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) AddItemsToBackpack(ctx context.Context, in *AddItemsToBackpackRequest, opts ...grpc.CallOption) (*AddItemsToBackpackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddItemsToBackpackResponse)
	err := c.cc.Invoke(ctx, Inventory_AddItemsToBackpack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryClient) ListBackpackItems(ctx context.Context, in *ListBackpackItemsRequest, opts ...grpc.CallOption) (*ListBackpackItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBackpackItemsResponse)
	err := c.cc.Invoke(ctx, Inventory_ListBackpackItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServer is the server API for Inventory service.
// All implementations must embed UnimplementedInventoryServer
// for forward compatibility.
type InventoryServer interface {
	Check(context.Context, *health.HealthCheckRequest) (*health.HealthCheckResponse, error)
	GetBalance(context.Context, *InventoryBalanceRequest) (*InventoryBalanceResponse, error)
	SellItem(context.Context, *SellItemRequest) (*SellItemResponse, error)
	AddItemsToBackpack(context.Context, *AddItemsToBackpackRequest) (*AddItemsToBackpackResponse, error)
	ListBackpackItems(context.Context, *ListBackpackItemsRequest) (*ListBackpackItemsResponse, error)
	mustEmbedUnimplementedInventoryServer()
}

// UnimplementedInventoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServer struct{}

func (UnimplementedInventoryServer) Check(context.Context, *health.HealthCheckRequest) (*health.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedInventoryServer) GetBalance(context.Context, *InventoryBalanceRequest) (*InventoryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedInventoryServer) SellItem(context.Context, *SellItemRequest) (*SellItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellItem not implemented")
}
func (UnimplementedInventoryServer) AddItemsToBackpack(context.Context, *AddItemsToBackpackRequest) (*AddItemsToBackpackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemsToBackpack not implemented")
}
func (UnimplementedInventoryServer) ListBackpackItems(context.Context, *ListBackpackItemsRequest) (*ListBackpackItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackpackItems not implemented")
}
func (UnimplementedInventoryServer) mustEmbedUnimplementedInventoryServer() {}
func (UnimplementedInventoryServer) testEmbeddedByValue()                   {}

// UnsafeInventoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServer will
// result in compilation errors.
type UnsafeInventoryServer interface {
	mustEmbedUnimplementedInventoryServer()
}

func RegisterInventoryServer(s grpc.ServiceRegistrar, srv InventoryServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Inventory_ServiceDesc, srv)
}

func _Inventory_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(health.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).Check(ctx, req.(*health.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).GetBalance(ctx, req.(*InventoryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_SellItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SellItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).SellItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_SellItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).SellItem(ctx, req.(*SellItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_AddItemsToBackpack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsToBackpackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).AddItemsToBackpack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_AddItemsToBackpack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).AddItemsToBackpack(ctx, req.(*AddItemsToBackpackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inventory_ListBackpackItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBackpackItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServer).ListBackpackItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inventory_ListBackpackItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServer).ListBackpackItems(ctx, req.(*ListBackpackItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inventory_ServiceDesc is the grpc.ServiceDesc for Inventory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inventory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Inventory",
	HandlerType: (*InventoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Inventory_Check_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Inventory_GetBalance_Handler,
		},
		{
			MethodName: "SellItem",
			Handler:    _Inventory_SellItem_Handler,
		},
		{
			MethodName: "AddItemsToBackpack",
			Handler:    _Inventory_AddItemsToBackpack_Handler,
		},
		{
			MethodName: "ListBackpackItems",
			Handler:    _Inventory_ListBackpackItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory/inventory.proto",
}
