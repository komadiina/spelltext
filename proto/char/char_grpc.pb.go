// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: char/char.proto

package char

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Character_ListHeroes_FullMethodName               = "/char.Character/ListHeroes"
	Character_ListCharacters_FullMethodName           = "/char.Character/ListCharacters"
	Character_SetSelectedCharacter_FullMethodName     = "/char.Character/SetSelectedCharacter"
	Character_GetLastSelectedCharacter_FullMethodName = "/char.Character/GetLastSelectedCharacter"
	Character_GetCharacter_FullMethodName             = "/char.Character/GetCharacter"
	Character_CreateCharacter_FullMethodName          = "/char.Character/CreateCharacter"
	Character_DeleteCharacter_FullMethodName          = "/char.Character/DeleteCharacter"
	Character_GetEquippedItems_FullMethodName         = "/char.Character/GetEquippedItems"
	Character_ToggleEquip_FullMethodName              = "/char.Character/ToggleEquip"
	Character_EquipItem_FullMethodName                = "/char.Character/EquipItem"
	Character_UnequipItem_FullMethodName              = "/char.Character/UnequipItem"
	Character_GetEquipSlots_FullMethodName            = "/char.Character/GetEquipSlots"
)

// CharacterClient is the client API for Character service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterClient interface {
	ListHeroes(ctx context.Context, in *ListHeroesRequest, opts ...grpc.CallOption) (*ListHeroesResponse, error)
	ListCharacters(ctx context.Context, in *ListCharactersRequest, opts ...grpc.CallOption) (*ListCharactersResponse, error)
	SetSelectedCharacter(ctx context.Context, in *SetSelectedCharacterRequest, opts ...grpc.CallOption) (*SetSelectedCharacterResponse, error)
	GetLastSelectedCharacter(ctx context.Context, in *GetLastSelectedCharacterRequest, opts ...grpc.CallOption) (*GetLastSelectedCharacterResponse, error)
	GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*GetCharacterResponse, error)
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error)
	DeleteCharacter(ctx context.Context, in *DeleteCharacterRequest, opts ...grpc.CallOption) (*DeleteCharacterResponse, error)
	GetEquippedItems(ctx context.Context, in *GetEquippedItemsRequest, opts ...grpc.CallOption) (*GetEquippedItemsResponse, error)
	ToggleEquip(ctx context.Context, in *ToggleEquipRequest, opts ...grpc.CallOption) (*ToggleEquipResponse, error)
	EquipItem(ctx context.Context, in *EquipItemRequest, opts ...grpc.CallOption) (*EquipItemResponse, error)
	UnequipItem(ctx context.Context, in *UnequipItemRequest, opts ...grpc.CallOption) (*UnequipItemResponse, error)
	GetEquipSlots(ctx context.Context, in *GetEquipSlotsRequest, opts ...grpc.CallOption) (*GetEquipSlotsResponse, error)
}

type characterClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterClient(cc grpc.ClientConnInterface) CharacterClient {
	return &characterClient{cc}
}

func (c *characterClient) ListHeroes(ctx context.Context, in *ListHeroesRequest, opts ...grpc.CallOption) (*ListHeroesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHeroesResponse)
	err := c.cc.Invoke(ctx, Character_ListHeroes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) ListCharacters(ctx context.Context, in *ListCharactersRequest, opts ...grpc.CallOption) (*ListCharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCharactersResponse)
	err := c.cc.Invoke(ctx, Character_ListCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) SetSelectedCharacter(ctx context.Context, in *SetSelectedCharacterRequest, opts ...grpc.CallOption) (*SetSelectedCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetSelectedCharacterResponse)
	err := c.cc.Invoke(ctx, Character_SetSelectedCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) GetLastSelectedCharacter(ctx context.Context, in *GetLastSelectedCharacterRequest, opts ...grpc.CallOption) (*GetLastSelectedCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLastSelectedCharacterResponse)
	err := c.cc.Invoke(ctx, Character_GetLastSelectedCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) GetCharacter(ctx context.Context, in *GetCharacterRequest, opts ...grpc.CallOption) (*GetCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCharacterResponse)
	err := c.cc.Invoke(ctx, Character_GetCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCharacterResponse)
	err := c.cc.Invoke(ctx, Character_CreateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) DeleteCharacter(ctx context.Context, in *DeleteCharacterRequest, opts ...grpc.CallOption) (*DeleteCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCharacterResponse)
	err := c.cc.Invoke(ctx, Character_DeleteCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) GetEquippedItems(ctx context.Context, in *GetEquippedItemsRequest, opts ...grpc.CallOption) (*GetEquippedItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEquippedItemsResponse)
	err := c.cc.Invoke(ctx, Character_GetEquippedItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) ToggleEquip(ctx context.Context, in *ToggleEquipRequest, opts ...grpc.CallOption) (*ToggleEquipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleEquipResponse)
	err := c.cc.Invoke(ctx, Character_ToggleEquip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) EquipItem(ctx context.Context, in *EquipItemRequest, opts ...grpc.CallOption) (*EquipItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EquipItemResponse)
	err := c.cc.Invoke(ctx, Character_EquipItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) UnequipItem(ctx context.Context, in *UnequipItemRequest, opts ...grpc.CallOption) (*UnequipItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnequipItemResponse)
	err := c.cc.Invoke(ctx, Character_UnequipItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) GetEquipSlots(ctx context.Context, in *GetEquipSlotsRequest, opts ...grpc.CallOption) (*GetEquipSlotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEquipSlotsResponse)
	err := c.cc.Invoke(ctx, Character_GetEquipSlots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterServer is the server API for Character service.
// All implementations must embed UnimplementedCharacterServer
// for forward compatibility.
type CharacterServer interface {
	ListHeroes(context.Context, *ListHeroesRequest) (*ListHeroesResponse, error)
	ListCharacters(context.Context, *ListCharactersRequest) (*ListCharactersResponse, error)
	SetSelectedCharacter(context.Context, *SetSelectedCharacterRequest) (*SetSelectedCharacterResponse, error)
	GetLastSelectedCharacter(context.Context, *GetLastSelectedCharacterRequest) (*GetLastSelectedCharacterResponse, error)
	GetCharacter(context.Context, *GetCharacterRequest) (*GetCharacterResponse, error)
	CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error)
	DeleteCharacter(context.Context, *DeleteCharacterRequest) (*DeleteCharacterResponse, error)
	GetEquippedItems(context.Context, *GetEquippedItemsRequest) (*GetEquippedItemsResponse, error)
	ToggleEquip(context.Context, *ToggleEquipRequest) (*ToggleEquipResponse, error)
	EquipItem(context.Context, *EquipItemRequest) (*EquipItemResponse, error)
	UnequipItem(context.Context, *UnequipItemRequest) (*UnequipItemResponse, error)
	GetEquipSlots(context.Context, *GetEquipSlotsRequest) (*GetEquipSlotsResponse, error)
	mustEmbedUnimplementedCharacterServer()
}

// UnimplementedCharacterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterServer struct{}

func (UnimplementedCharacterServer) ListHeroes(context.Context, *ListHeroesRequest) (*ListHeroesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHeroes not implemented")
}
func (UnimplementedCharacterServer) ListCharacters(context.Context, *ListCharactersRequest) (*ListCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharacters not implemented")
}
func (UnimplementedCharacterServer) SetSelectedCharacter(context.Context, *SetSelectedCharacterRequest) (*SetSelectedCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSelectedCharacter not implemented")
}
func (UnimplementedCharacterServer) GetLastSelectedCharacter(context.Context, *GetLastSelectedCharacterRequest) (*GetLastSelectedCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastSelectedCharacter not implemented")
}
func (UnimplementedCharacterServer) GetCharacter(context.Context, *GetCharacterRequest) (*GetCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacter not implemented")
}
func (UnimplementedCharacterServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedCharacterServer) DeleteCharacter(context.Context, *DeleteCharacterRequest) (*DeleteCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCharacter not implemented")
}
func (UnimplementedCharacterServer) GetEquippedItems(context.Context, *GetEquippedItemsRequest) (*GetEquippedItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquippedItems not implemented")
}
func (UnimplementedCharacterServer) ToggleEquip(context.Context, *ToggleEquipRequest) (*ToggleEquipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleEquip not implemented")
}
func (UnimplementedCharacterServer) EquipItem(context.Context, *EquipItemRequest) (*EquipItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EquipItem not implemented")
}
func (UnimplementedCharacterServer) UnequipItem(context.Context, *UnequipItemRequest) (*UnequipItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnequipItem not implemented")
}
func (UnimplementedCharacterServer) GetEquipSlots(context.Context, *GetEquipSlotsRequest) (*GetEquipSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipSlots not implemented")
}
func (UnimplementedCharacterServer) mustEmbedUnimplementedCharacterServer() {}
func (UnimplementedCharacterServer) testEmbeddedByValue()                   {}

// UnsafeCharacterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterServer will
// result in compilation errors.
type UnsafeCharacterServer interface {
	mustEmbedUnimplementedCharacterServer()
}

func RegisterCharacterServer(s grpc.ServiceRegistrar, srv CharacterServer) {
	// If the following call pancis, it indicates UnimplementedCharacterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Character_ServiceDesc, srv)
}

func _Character_ListHeroes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHeroesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).ListHeroes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_ListHeroes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).ListHeroes(ctx, req.(*ListHeroesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_ListCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).ListCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_ListCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).ListCharacters(ctx, req.(*ListCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_SetSelectedCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSelectedCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).SetSelectedCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_SetSelectedCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).SetSelectedCharacter(ctx, req.(*SetSelectedCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_GetLastSelectedCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastSelectedCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).GetLastSelectedCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_GetLastSelectedCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).GetLastSelectedCharacter(ctx, req.(*GetLastSelectedCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_GetCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).GetCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_GetCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).GetCharacter(ctx, req.(*GetCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_DeleteCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).DeleteCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_DeleteCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).DeleteCharacter(ctx, req.(*DeleteCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_GetEquippedItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquippedItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).GetEquippedItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_GetEquippedItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).GetEquippedItems(ctx, req.(*GetEquippedItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_ToggleEquip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleEquipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).ToggleEquip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_ToggleEquip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).ToggleEquip(ctx, req.(*ToggleEquipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_EquipItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).EquipItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_EquipItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).EquipItem(ctx, req.(*EquipItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_UnequipItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnequipItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).UnequipItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_UnequipItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).UnequipItem(ctx, req.(*UnequipItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_GetEquipSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEquipSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).GetEquipSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_GetEquipSlots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).GetEquipSlots(ctx, req.(*GetEquipSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Character_ServiceDesc is the grpc.ServiceDesc for Character service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Character_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "char.Character",
	HandlerType: (*CharacterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHeroes",
			Handler:    _Character_ListHeroes_Handler,
		},
		{
			MethodName: "ListCharacters",
			Handler:    _Character_ListCharacters_Handler,
		},
		{
			MethodName: "SetSelectedCharacter",
			Handler:    _Character_SetSelectedCharacter_Handler,
		},
		{
			MethodName: "GetLastSelectedCharacter",
			Handler:    _Character_GetLastSelectedCharacter_Handler,
		},
		{
			MethodName: "GetCharacter",
			Handler:    _Character_GetCharacter_Handler,
		},
		{
			MethodName: "CreateCharacter",
			Handler:    _Character_CreateCharacter_Handler,
		},
		{
			MethodName: "DeleteCharacter",
			Handler:    _Character_DeleteCharacter_Handler,
		},
		{
			MethodName: "GetEquippedItems",
			Handler:    _Character_GetEquippedItems_Handler,
		},
		{
			MethodName: "ToggleEquip",
			Handler:    _Character_ToggleEquip_Handler,
		},
		{
			MethodName: "EquipItem",
			Handler:    _Character_EquipItem_Handler,
		},
		{
			MethodName: "UnequipItem",
			Handler:    _Character_UnequipItem_Handler,
		},
		{
			MethodName: "GetEquipSlots",
			Handler:    _Character_GetEquipSlots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "char/char.proto",
}
