syntax = "proto3";
package store;
option go_package = "proto/store;store";

import "google/protobuf/struct.proto";

enum ItemType {
  ITEM_TYPE_UNSPECIFIED = 0;
  ITEM_TYPE_GENERIC     = 1;
  ITEM_TYPE_CONSUMABLE  = 2;
  ITEM_TYPE_ARMOR       = 3;
  ITEM_TYPE_WEAPON      = 4;
  ITEM_TYPE_OTHER       = 99;
}

message StoreListItemRequest {
  ItemType item_type = 1;                      // 0 = any
  int32 rarity_min = 2;
  int32 rarity_max = 3;
  uint32 stackable = 4;                          
  uint32 in_stock = 5;                           
  int32 page_size = 10;
  string page_token = 11;
  string sort_by = 12;                         // "name", "rarity", "stock"
  bool sort_desc = 13;
}

message ItemListResponse {
  repeated Item items = 1;
  int64 total_count = 2;                       // opt, 0 if expensive to compute
}

message Item {
  uint64 id = 1;                                
  string name = 2;
  uint32 item_type_id = 3;
  uint32 rarity = 4;
  uint32 stackable = 5;
  uint32 stack_size = 6;
  uint32 bind_on_pickup = 7;
  string description = 8;
  google.protobuf.Struct metadata = 9;        
  
  oneof type_details {
    ConsumableDetails consumable = 20;
    ArmorDetails armor = 21;
    WeaponDetails weapon = 22;
    GenericDetails generic = 23;
  }
}

// manual orm
message ConsumableDetails {
  int32 uses = 1;
  string prefix = 2;
  string suffix = 3;
  int32 healing = 4;
  int32 power = 5;
  int32 strength = 6;
  int32 spellpower = 7;
}

message ArmorDetails {
  int32 equip_slot_id = 1;
  string prefix = 2;
  string suffix = 3;
  int32 armor = 4;
  int32 health = 5;
  int32 power = 6;
  int32 strength = 7;
  int32 spellpower = 8;
}

message WeaponDetails {
  int32 base_damage = 1;
  string prefix = 2;
  string suffix = 3;
  int32 strength = 4;
  int32 spellpower = 5;
}

message GenericDetails {
  string note = 1;
}


/// id must be empty. storeserver sets id, created_at, updated_at
message AddItemRequest {
  Item item = 1;
}

message AddItemResponse {
  int64 id = 1;
  Item created = 2;
}

message BuyItemRequest {
  uint64 character_id = 1;
  int64 item_template_id = 2;
  int32 quantity = 3;
}

message BuyItemResponse {
  bool success = 1;
  string message = 2;
}

service Store {
  rpc ListItems(StoreListItemRequest) returns (ItemListResponse);
  rpc AddItem(AddItemRequest) returns (AddItemResponse);
  rpc BuyItem(BuyItemRequest) returns (BuyItemResponse);
}