syntax = "proto3";
package store;
option go_package = "github.com/komadiina/spelltext/proto/store;store";


message StoreListVendorRequest {
  string noop = 1;
}

message Vendor {
  uint64 vendor_id = 1;
  string vendor_name = 2;
  string vendor_ware_description = 3;
}

message StoreListVendorResponse {
  repeated Vendor vendors = 1;
}

message StoreListVendorItemRequest {
  uint64 vendor_id = 1;                      // 0 = any
  int32 rarity_min = 2;
  int32 rarity_max = 3;
  uint32 stackable = 4;                          
  uint32 in_stock = 5;                           
  int32 page_size = 10;
  string page_token = 11;
  string sort_by = 12;                         // "name", "rarity", "stock"
  bool sort_desc = 13;
}

message ListVendorItemResponse {
  repeated Item items = 1;
  int64 total_count = 2;
}

message Item { // Item = dbItem || dbConsumable
  uint64 id = 1;                                
  string name = 2;
  uint32 item_type_id = 3;
  string item_type_code = 4;
  uint64 item_template_id = 5;
  string description = 9;
  uint64 gold_price = 10;
  int32 buyable_with_tokens = 11;
  uint64 token_price = 12;
  
  // uint32 stackable = 6; // TODO: when impl dbConsumable
  // uint32 uses = 7
  // uint32 stack_size = 8;
  // uint32 bind_on_pickup = 9;
  string prefix = 13;
  string suffix = 14;
  int64 health = 15;
  int64 power = 16;
  int64 strength = 17;
  int64 spellpower = 18;
  int64 bonus_damage = 19;
  int64 bonus_armor = 20;
}

message GenericDetails {
  string note = 1;
}

/// id must be empty. storeserver sets id, created_at, updated_at
message AddItemRequest {
  Item item = 1;
}

message AddItemResponse {
  int64 id = 1;
  Item created = 2;
}

message BuyItemRequest {
  uint64 character_id = 1;
  repeated uint64 item_ids = 2;
  int32 quantity = 3;
}

message BuyItemResponse {
  bool success = 1;
  string message = 2;
}

message SellItemRequest {
  uint64 character_id = 1;
  int64 item_instance_id = 2;
}

message SellItemResponse {
  bool success = 1;
  string message = 2;
}

service Store {
  rpc ListVendors(StoreListVendorRequest) returns (StoreListVendorResponse);
  rpc ListVendorItems(StoreListVendorItemRequest) returns (ListVendorItemResponse);
  rpc AddItem(AddItemRequest) returns (AddItemResponse);
  rpc BuyItems(BuyItemRequest) returns (BuyItemResponse);
  rpc SellItem(SellItemRequest) returns (SellItemResponse); // deprecated: moved to inventoryserver (client sells from character inventory directly)
}