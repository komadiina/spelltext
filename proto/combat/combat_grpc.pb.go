// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: combat/combat.proto

package combat

import (
	context "context"
	health "github.com/komadiina/spelltext/proto/health"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Combat_Check_FullMethodName          = "/combat.Combat/Check"
	Combat_ListNpcs_FullMethodName       = "/combat.Combat/ListNpcs"
	Combat_InitiateCombat_FullMethodName = "/combat.Combat/InitiateCombat"
	Combat_ResolveCombat_FullMethodName  = "/combat.Combat/ResolveCombat"
)

// CombatClient is the client API for Combat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CombatClient interface {
	Check(ctx context.Context, in *health.HealthCheckRequest, opts ...grpc.CallOption) (*health.HealthCheckResponse, error)
	ListNpcs(ctx context.Context, in *ListNpcsRequest, opts ...grpc.CallOption) (*ListNpcsResponse, error)
	InitiateCombat(ctx context.Context, in *InitiateCombatRequest, opts ...grpc.CallOption) (*InitiateCombatResponse, error)
	ResolveCombat(ctx context.Context, in *ResolveCombatRequest, opts ...grpc.CallOption) (*ResolveCombatResponse, error)
}

type combatClient struct {
	cc grpc.ClientConnInterface
}

func NewCombatClient(cc grpc.ClientConnInterface) CombatClient {
	return &combatClient{cc}
}

func (c *combatClient) Check(ctx context.Context, in *health.HealthCheckRequest, opts ...grpc.CallOption) (*health.HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(health.HealthCheckResponse)
	err := c.cc.Invoke(ctx, Combat_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combatClient) ListNpcs(ctx context.Context, in *ListNpcsRequest, opts ...grpc.CallOption) (*ListNpcsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNpcsResponse)
	err := c.cc.Invoke(ctx, Combat_ListNpcs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combatClient) InitiateCombat(ctx context.Context, in *InitiateCombatRequest, opts ...grpc.CallOption) (*InitiateCombatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateCombatResponse)
	err := c.cc.Invoke(ctx, Combat_InitiateCombat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combatClient) ResolveCombat(ctx context.Context, in *ResolveCombatRequest, opts ...grpc.CallOption) (*ResolveCombatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveCombatResponse)
	err := c.cc.Invoke(ctx, Combat_ResolveCombat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CombatServer is the server API for Combat service.
// All implementations must embed UnimplementedCombatServer
// for forward compatibility.
type CombatServer interface {
	Check(context.Context, *health.HealthCheckRequest) (*health.HealthCheckResponse, error)
	ListNpcs(context.Context, *ListNpcsRequest) (*ListNpcsResponse, error)
	InitiateCombat(context.Context, *InitiateCombatRequest) (*InitiateCombatResponse, error)
	ResolveCombat(context.Context, *ResolveCombatRequest) (*ResolveCombatResponse, error)
	mustEmbedUnimplementedCombatServer()
}

// UnimplementedCombatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCombatServer struct{}

func (UnimplementedCombatServer) Check(context.Context, *health.HealthCheckRequest) (*health.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedCombatServer) ListNpcs(context.Context, *ListNpcsRequest) (*ListNpcsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNpcs not implemented")
}
func (UnimplementedCombatServer) InitiateCombat(context.Context, *InitiateCombatRequest) (*InitiateCombatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateCombat not implemented")
}
func (UnimplementedCombatServer) ResolveCombat(context.Context, *ResolveCombatRequest) (*ResolveCombatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCombat not implemented")
}
func (UnimplementedCombatServer) mustEmbedUnimplementedCombatServer() {}
func (UnimplementedCombatServer) testEmbeddedByValue()                {}

// UnsafeCombatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CombatServer will
// result in compilation errors.
type UnsafeCombatServer interface {
	mustEmbedUnimplementedCombatServer()
}

func RegisterCombatServer(s grpc.ServiceRegistrar, srv CombatServer) {
	// If the following call pancis, it indicates UnimplementedCombatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Combat_ServiceDesc, srv)
}

func _Combat_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(health.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombatServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Combat_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombatServer).Check(ctx, req.(*health.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Combat_ListNpcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNpcsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombatServer).ListNpcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Combat_ListNpcs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombatServer).ListNpcs(ctx, req.(*ListNpcsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Combat_InitiateCombat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateCombatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombatServer).InitiateCombat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Combat_InitiateCombat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombatServer).InitiateCombat(ctx, req.(*InitiateCombatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Combat_ResolveCombat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveCombatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CombatServer).ResolveCombat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Combat_ResolveCombat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CombatServer).ResolveCombat(ctx, req.(*ResolveCombatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Combat_ServiceDesc is the grpc.ServiceDesc for Combat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Combat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "combat.Combat",
	HandlerType: (*CombatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Combat_Check_Handler,
		},
		{
			MethodName: "ListNpcs",
			Handler:    _Combat_ListNpcs_Handler,
		},
		{
			MethodName: "InitiateCombat",
			Handler:    _Combat_InitiateCombat_Handler,
		},
		{
			MethodName: "ResolveCombat",
			Handler:    _Combat_ResolveCombat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "combat/combat.proto",
}
