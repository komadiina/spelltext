// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: armory.proto

package armory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Character_ListHeroes_FullMethodName      = "/armory.Character/ListHeroes"
	Character_ListCharacters_FullMethodName  = "/armory.Character/ListCharacters"
	Character_CreateCharacter_FullMethodName = "/armory.Character/CreateCharacter"
	Character_DeleteCharacter_FullMethodName = "/armory.Character/DeleteCharacter"
)

// CharacterClient is the client API for Character service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharacterClient interface {
	ListHeroes(ctx context.Context, in *ListHeroesRequest, opts ...grpc.CallOption) (*ListHeroesResponse, error)
	ListCharacters(ctx context.Context, in *ListCharactersRequest, opts ...grpc.CallOption) (*ListCharactersResponse, error)
	CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error)
	DeleteCharacter(ctx context.Context, in *DeleteCharacterRequest, opts ...grpc.CallOption) (*DeleteCharacterResponse, error)
}

type characterClient struct {
	cc grpc.ClientConnInterface
}

func NewCharacterClient(cc grpc.ClientConnInterface) CharacterClient {
	return &characterClient{cc}
}

func (c *characterClient) ListHeroes(ctx context.Context, in *ListHeroesRequest, opts ...grpc.CallOption) (*ListHeroesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHeroesResponse)
	err := c.cc.Invoke(ctx, Character_ListHeroes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) ListCharacters(ctx context.Context, in *ListCharactersRequest, opts ...grpc.CallOption) (*ListCharactersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCharactersResponse)
	err := c.cc.Invoke(ctx, Character_ListCharacters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) CreateCharacter(ctx context.Context, in *CreateCharacterRequest, opts ...grpc.CallOption) (*CreateCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCharacterResponse)
	err := c.cc.Invoke(ctx, Character_CreateCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *characterClient) DeleteCharacter(ctx context.Context, in *DeleteCharacterRequest, opts ...grpc.CallOption) (*DeleteCharacterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCharacterResponse)
	err := c.cc.Invoke(ctx, Character_DeleteCharacter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharacterServer is the server API for Character service.
// All implementations must embed UnimplementedCharacterServer
// for forward compatibility.
type CharacterServer interface {
	ListHeroes(context.Context, *ListHeroesRequest) (*ListHeroesResponse, error)
	ListCharacters(context.Context, *ListCharactersRequest) (*ListCharactersResponse, error)
	CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error)
	DeleteCharacter(context.Context, *DeleteCharacterRequest) (*DeleteCharacterResponse, error)
	mustEmbedUnimplementedCharacterServer()
}

// UnimplementedCharacterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCharacterServer struct{}

func (UnimplementedCharacterServer) ListHeroes(context.Context, *ListHeroesRequest) (*ListHeroesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHeroes not implemented")
}
func (UnimplementedCharacterServer) ListCharacters(context.Context, *ListCharactersRequest) (*ListCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharacters not implemented")
}
func (UnimplementedCharacterServer) CreateCharacter(context.Context, *CreateCharacterRequest) (*CreateCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCharacter not implemented")
}
func (UnimplementedCharacterServer) DeleteCharacter(context.Context, *DeleteCharacterRequest) (*DeleteCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCharacter not implemented")
}
func (UnimplementedCharacterServer) mustEmbedUnimplementedCharacterServer() {}
func (UnimplementedCharacterServer) testEmbeddedByValue()                   {}

// UnsafeCharacterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharacterServer will
// result in compilation errors.
type UnsafeCharacterServer interface {
	mustEmbedUnimplementedCharacterServer()
}

func RegisterCharacterServer(s grpc.ServiceRegistrar, srv CharacterServer) {
	// If the following call pancis, it indicates UnimplementedCharacterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Character_ServiceDesc, srv)
}

func _Character_ListHeroes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHeroesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).ListHeroes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_ListHeroes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).ListHeroes(ctx, req.(*ListHeroesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_ListCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).ListCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_ListCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).ListCharacters(ctx, req.(*ListCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_CreateCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).CreateCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_CreateCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).CreateCharacter(ctx, req.(*CreateCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Character_DeleteCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharacterServer).DeleteCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Character_DeleteCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharacterServer).DeleteCharacter(ctx, req.(*DeleteCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Character_ServiceDesc is the grpc.ServiceDesc for Character service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Character_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "armory.Character",
	HandlerType: (*CharacterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHeroes",
			Handler:    _Character_ListHeroes_Handler,
		},
		{
			MethodName: "ListCharacters",
			Handler:    _Character_ListCharacters_Handler,
		},
		{
			MethodName: "CreateCharacter",
			Handler:    _Character_CreateCharacter_Handler,
		},
		{
			MethodName: "DeleteCharacter",
			Handler:    _Character_DeleteCharacter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "armory.proto",
}
