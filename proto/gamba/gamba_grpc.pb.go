// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: gamba/gamba.proto

package gamba

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Gamba_GetChests_FullMethodName = "/gamba.Gamba/GetChests"
	Gamba_OpenChest_FullMethodName = "/gamba.Gamba/OpenChest"
)

// GambaClient is the client API for Gamba service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GambaClient interface {
	GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsResponse, error)
	OpenChest(ctx context.Context, in *OpenChestRequest, opts ...grpc.CallOption) (*OpenChestResponse, error)
}

type gambaClient struct {
	cc grpc.ClientConnInterface
}

func NewGambaClient(cc grpc.ClientConnInterface) GambaClient {
	return &gambaClient{cc}
}

func (c *gambaClient) GetChests(ctx context.Context, in *GetChestsRequest, opts ...grpc.CallOption) (*GetChestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChestsResponse)
	err := c.cc.Invoke(ctx, Gamba_GetChests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gambaClient) OpenChest(ctx context.Context, in *OpenChestRequest, opts ...grpc.CallOption) (*OpenChestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenChestResponse)
	err := c.cc.Invoke(ctx, Gamba_OpenChest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GambaServer is the server API for Gamba service.
// All implementations must embed UnimplementedGambaServer
// for forward compatibility.
type GambaServer interface {
	GetChests(context.Context, *GetChestsRequest) (*GetChestsResponse, error)
	OpenChest(context.Context, *OpenChestRequest) (*OpenChestResponse, error)
	mustEmbedUnimplementedGambaServer()
}

// UnimplementedGambaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGambaServer struct{}

func (UnimplementedGambaServer) GetChests(context.Context, *GetChestsRequest) (*GetChestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChests not implemented")
}
func (UnimplementedGambaServer) OpenChest(context.Context, *OpenChestRequest) (*OpenChestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenChest not implemented")
}
func (UnimplementedGambaServer) mustEmbedUnimplementedGambaServer() {}
func (UnimplementedGambaServer) testEmbeddedByValue()               {}

// UnsafeGambaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GambaServer will
// result in compilation errors.
type UnsafeGambaServer interface {
	mustEmbedUnimplementedGambaServer()
}

func RegisterGambaServer(s grpc.ServiceRegistrar, srv GambaServer) {
	// If the following call pancis, it indicates UnimplementedGambaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Gamba_ServiceDesc, srv)
}

func _Gamba_GetChests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GambaServer).GetChests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gamba_GetChests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GambaServer).GetChests(ctx, req.(*GetChestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gamba_OpenChest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenChestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GambaServer).OpenChest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gamba_OpenChest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GambaServer).OpenChest(ctx, req.(*OpenChestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gamba_ServiceDesc is the grpc.ServiceDesc for Gamba service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gamba_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamba.Gamba",
	HandlerType: (*GambaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChests",
			Handler:    _Gamba_GetChests_Handler,
		},
		{
			MethodName: "OpenChest",
			Handler:    _Gamba_OpenChest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gamba/gamba.proto",
}
